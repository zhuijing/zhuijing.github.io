(window.webpackJsonp=window.webpackJsonp||[]).push([[177],{571:function(t,a,s){"use strict";s.r(a);var r=s(10),v=Object(r.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"如何设计组件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何设计组件"}},[t._v("#")]),t._v(" 如何设计组件")]),t._v(" "),a("blockquote",[a("p",[t._v("设计组件的时候需要遵循先设计，后实现的理念。")])]),t._v(" "),a("h2",{attrs:{id:"组件设计四要素"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#组件设计四要素"}},[t._v("#")]),t._v(" 组件设计四要素")]),t._v(" "),a("ol",[a("li",[t._v("属性： 属性的类型、是否必填、默认值（属性类型确定后不再变化）")]),t._v(" "),a("li",[t._v("方法： 方法的参数、返回值（需要考虑变化的情况）")]),t._v(" "),a("li",[t._v("时间： 事件回调函数的参数")]),t._v(" "),a("li",[t._v("子视图（插槽）： 插槽可获取到的局部参数")])]),t._v(" "),a("h2",{attrs:{id:"最小化原则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#最小化原则"}},[t._v("#")]),t._v(" 最小化原则")]),t._v(" "),a("blockquote",[a("p",[t._v("设计组件时，务必遵循最小化原则，即尽可能少地抛出接口,\n因为使用组件的用户可能有很多，一旦组件作者不小心抛出了一个不合理的接口，以后想要修改就几乎不可能了（只能通过标记过时的方法提醒用户，但这种做法往往是无奈之举）。")])]),t._v(" "),a("h2",{attrs:{id:"兼容多种情况"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#兼容多种情况"}},[t._v("#")]),t._v(" 兼容多种情况")]),t._v(" "),a("blockquote",[a("p",[t._v("组件内部获取内容的方式有多种，用户可以直接传入内容，也可以传入id，组件内部获取，当有多种情况时，需要对传入的数据做判断，以防用户啥也不传")])]),t._v(" "),a("h2",{attrs:{id:"兼容不同模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#兼容不同模式"}},[t._v("#")]),t._v(" 兼容不同模式")]),t._v(" "),a("blockquote",[a("p",[t._v("组件有多个状态，比如编辑或者阅读。此时传入数组，并以数组第一个元素为默认值")])]),t._v(" "),a("h2",{attrs:{id:"组件状态改变"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#组件状态改变"}},[t._v("#")]),t._v(" 组件状态改变")]),t._v(" "),a("blockquote",[a("p",[t._v("当组件内部有多个状态的时候，是否需要将组件状态通知到外部，此时需要组件设计者认真考虑")])]),t._v(" "),a("h2",{attrs:{id:"组件插槽"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#组件插槽"}},[t._v("#")]),t._v(" 组件插槽")]),t._v(" "),a("blockquote",[a("p",[t._v("支持用户在组件内部附加任何其他组件")])])])}),[],!1,null,null,null);a.default=v.exports}}]);