# 荷鲁斯之眼项目总结

## 项目需求

根据公司内摄像头抓拍信息，获取行人轨迹及随行人员，并用canvas进行绘制

## 相机点位转换
获取摄像头IP，并转为ID

## 两点之间的轨迹

使用高级贝塞尔曲线，获取两点间的 贝塞尔轨迹参数，并做key-value的转换

```js
const alltraces = {
  '21_7': { x0: 459, y0: 348, xA: [450, 432, 404], yA: [354, 353, 364] }, // 21点到7点的轨迹是 
  '7_21': { x0: 404, y0: 364, xA: [432, 450, 459], yA: [353, 354, 348] },
  '7_9': { x0: 539, y0: 336, xA: [506, 489, 459], yA: [340, 345, 348] }  // 7到9点的轨迹是
}
```
## 图的转换

计算某个点可以直接到达的所有点，并用图表示

::: details
```js
const DictionaryOfPoints = {
  3: [10],
  4: [14, 46],
  5: [8, 15, 45, 47],
  7: [9, 21],
  8: [9, 5],
  9: [7, 8],
  10: [3, 11, 16, 45],
  11: [10, 14, 20],
  14: [4, 11, 15, 40],
  15: [5, 14, 45],
  16: [10, 11, 29, 33, 45],
  17: [22, 23],
  18: [21, 28, 32, 48],
  19: [20, 40],
  20: [11, 19, 34],
  21: [7, 18],
  22: [17, 33],
  23: [17, 28],
  28: [18, 23, 29],
  29: [16, 28],
  32: [18, 45],
  33: [16, 22],
  34: [20],
  40: [14, 19],
  45: [5, 10, 15, 16, 32],
  46: [4, 47],
  47: [5, 46],
  48: [18]
}
```
:::

## 转换摄像头点位

同一个点位会有多个摄像头，将多个摄像头转为同一个。比如 2，6，5摄像机都是一个位置，可以转为同一个点 5

::: details
```js
export function replaceId(str) {
  const rules = {
    2: 5,
    6: 5,
    12: 14,
    13: 11,
    24: 21,
    25: 40,
    26: 19,
    27: 11,
    30: 14,
    31: 20,
    35: 45,
    36: 16,
    37: 18,
    38: 23,
    39: 32,
    41: 33,
    42: 22,
    43: 29,
    44: 17
  }
  if (rules[str]) {
    return rules[str] * 1
  }
  return str * 1
}
```
:::

## 去除接口重复的点

同一摄像头同一时间多次抓拍，后端未去重。前端需要去重，只保留最后一次


## 计算路线

```js
const getTrils = start => end => obj => path => {
        if (start === end) {
            return [path]
        }
        if (path.length === Object.keys(obj).length + 1) {
            return [
                []
            ]
        }
        if (obj[start] == null) {
            return [
                []
            ]
        }
        return obj[start].filter(a => !path.includes(a)).map(a => getTrils(a)(end)(obj)([...path, a])).flat()
            .filter(a => a.length !== 0)
    }

```
## 绘制步骤

1. 接口数据返回，获取所有点位，同时转换点位
2. 将所有的点位进行去重处理
3. 循环遍历所有点，获取两个点的贝塞尔曲线参数
4. 生成动画数组
5. 将动画进行chain调用，多个动画串联执行
```js
   tweens.reduce((prev, curr) => {
      prev.chain(curr)
      return curr
    })
```

## demo
::: details
```html
<html>
<script>
    (function (global, factory) {
        typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
            typeof define === 'function' && define.amd ? define(factory) :
            (global.TWEEN = factory());
    }(this, (function () {
        'use strict';

        var version = '18.5.0';

        /**
         * Tween.js - Licensed under the MIT license
         * https://github.com/tweenjs/tween.js
         * ----------------------------------------------
         *
         * See https://github.com/tweenjs/tween.js/graphs/contributors for the full list of contributors.
         * Thank you all, you're awesome!
         */


        var _Group = function () {
            this._tweens = {};
            this._tweensAddedDuringUpdate = {};
        };

        _Group.prototype = {
            getAll: function () {

                return Object.keys(this._tweens).map(function (tweenId) {
                    return this._tweens[tweenId];
                }.bind(this));

            },

            removeAll: function () {

                this._tweens = {};

            },

            add: function (tween) {

                this._tweens[tween.getId()] = tween;
                this._tweensAddedDuringUpdate[tween.getId()] = tween;

            },

            remove: function (tween) {

                delete this._tweens[tween.getId()];
                delete this._tweensAddedDuringUpdate[tween.getId()];

            },

            update: function (time, preserve) {

                var tweenIds = Object.keys(this._tweens);

                if (tweenIds.length === 0) {
                    return false;
                }

                time = time !== undefined ? time : TWEEN.now();

                // Tweens are updated in "batches". If you add a new tween during an
                // update, then the new tween will be updated in the next batch.
                // If you remove a tween during an update, it may or may not be updated.
                // However, if the removed tween was added during the current batch,
                // then it will not be updated.
                while (tweenIds.length > 0) {
                    this._tweensAddedDuringUpdate = {};

                    for (var i = 0; i < tweenIds.length; i++) {

                        var tween = this._tweens[tweenIds[i]];

                        if (tween && tween.update(time) === false) {
                            tween._isPlaying = false;

                            if (!preserve) {
                                delete this._tweens[tweenIds[i]];
                            }
                        }
                    }

                    tweenIds = Object.keys(this._tweensAddedDuringUpdate);
                }

                return true;

            }
        };

        var TWEEN = new _Group();

        TWEEN.Group = _Group;
        TWEEN._nextId = 0;
        TWEEN.nextId = function () {
            return TWEEN._nextId++;
        };


        // Include a performance.now polyfill.
        // In node.js, use process.hrtime.
        if (typeof (self) === 'undefined' && typeof (process) !== 'undefined' && process.hrtime) {
            TWEEN.now = function () {
                var time = process.hrtime();

                // Convert [seconds, nanoseconds] to milliseconds.
                return time[0] * 1000 + time[1] / 1000000;
            };
        }
        // In a browser, use self.performance.now if it is available.
        else if (typeof (self) !== 'undefined' &&
            self.performance !== undefined &&
            self.performance.now !== undefined) {
            // This must be bound, because directly assigning this function
            // leads to an invocation exception in Chrome.
            TWEEN.now = self.performance.now.bind(self.performance);
        }
        // Use Date.now if it is available.
        else if (Date.now !== undefined) {
            TWEEN.now = Date.now;
        }
        // Otherwise, use 'new Date().getTime()'.
        else {
            TWEEN.now = function () {
                return new Date().getTime();
            };
        }


        TWEEN.Tween = function (object, group) {
            this._isPaused = false;
            this._pauseStart = null;
            this._object = object;
            this._valuesStart = {};
            this._valuesEnd = {};
            this._valuesStartRepeat = {};
            this._duration = 1000;
            this._repeat = 0;
            this._repeatDelayTime = undefined;
            this._yoyo = false;
            this._isPlaying = false;
            this._reversed = false;
            this._delayTime = 0;
            this._startTime = null;
            this._easingFunction = TWEEN.Easing.Linear.None;
            this._interpolationFunction = TWEEN.Interpolation.Linear;
            this._chainedTweens = [];
            this._onStartCallback = null;
            this._onStartCallbackFired = false;
            this._onUpdateCallback = null;
            this._onRepeatCallback = null;
            this._onCompleteCallback = null;
            this._onStopCallback = null;
            this._group = group || TWEEN;
            this._id = TWEEN.nextId();

        };

        TWEEN.Tween.prototype = {
            getId: function () {
                return this._id;
            },

            isPlaying: function () {
                return this._isPlaying;
            },

            isPaused: function () {
                return this._isPaused;
            },

            to: function (properties, duration) {

                this._valuesEnd = Object.create(properties);

                if (duration !== undefined) {
                    this._duration = duration;
                }

                return this;

            },

            duration: function duration(d) {
                this._duration = d;
                return this;
            },

            start: function (time) {

                this._group.add(this);

                this._isPlaying = true;

                this._isPaused = false;

                this._onStartCallbackFired = false;

                this._startTime = time !== undefined ? typeof time === 'string' ? TWEEN.now() +
                    parseFloat(time) : time : TWEEN.now();
                this._startTime += this._delayTime;

                for (var property in this._valuesEnd) {

                    // Check if an Array was provided as property value
                    if (this._valuesEnd[property] instanceof Array) {

                        if (this._valuesEnd[property].length === 0) {
                            continue;
                        }

                        // Create a local copy of the Array with the start value at the front
                        this._valuesEnd[property] = [this._object[property]].concat(this._valuesEnd[
                            property]);

                    }

                    // If `to()` specifies a property that doesn't exist in the source object,
                    // we should not set that property in the object
                    if (this._object[property] === undefined) {
                        continue;
                    }

                    // Save the starting value, but only once.
                    if (typeof (this._valuesStart[property]) === 'undefined') {
                        this._valuesStart[property] = this._object[property];
                    }

                    if ((this._valuesStart[property] instanceof Array) === false) {
                        this._valuesStart[property] *=
                            1.0; // Ensures we're using numbers, not strings
                    }

                    this._valuesStartRepeat[property] = this._valuesStart[property] || 0;

                }

                return this;

            },

            stop: function () {

                if (!this._isPlaying) {
                    return this;
                }

                this._group.remove(this);

                this._isPlaying = false;

                this._isPaused = false;

                if (this._onStopCallback !== null) {
                    this._onStopCallback(this._object);
                }

                this.stopChainedTweens();
                return this;

            },

            end: function () {

                this.update(Infinity);
                return this;

            },

            pause: function (time) {

                if (this._isPaused || !this._isPlaying) {
                    return this;
                }

                this._isPaused = true;

                this._pauseStart = time === undefined ? TWEEN.now() : time;

                this._group.remove(this);

                return this;

            },

            resume: function (time) {

                if (!this._isPaused || !this._isPlaying) {
                    return this;
                }

                this._isPaused = false;

                this._startTime += (time === undefined ? TWEEN.now() : time) -
                    this._pauseStart;

                this._pauseStart = 0;

                this._group.add(this);

                return this;

            },

            stopChainedTweens: function () {

                for (var i = 0, numChainedTweens = this._chainedTweens.length; i <
                    numChainedTweens; i++) {
                    this._chainedTweens[i].stop();
                }

            },

            group: function (group) {
                this._group = group;
                return this;
            },

            delay: function (amount) {

                this._delayTime = amount;
                return this;

            },

            repeat: function (times) {

                this._repeat = times;
                return this;

            },

            repeatDelay: function (amount) {

                this._repeatDelayTime = amount;
                return this;

            },

            yoyo: function (yoyo) {

                this._yoyo = yoyo;
                return this;

            },

            easing: function (easingFunction) {

                this._easingFunction = easingFunction;
                return this;

            },

            interpolation: function (interpolationFunction) {

                this._interpolationFunction = interpolationFunction;
                return this;

            },

            chain: function () {

                this._chainedTweens = arguments;
                return this;

            },

            onStart: function (callback) {

                this._onStartCallback = callback;
                return this;

            },

            onUpdate: function (callback) {

                this._onUpdateCallback = callback;
                return this;

            },

            onRepeat: function onRepeat(callback) {

                this._onRepeatCallback = callback;
                return this;

            },

            onComplete: function (callback) {

                this._onCompleteCallback = callback;
                return this;

            },

            onStop: function (callback) {

                this._onStopCallback = callback;
                return this;

            },

            update: function (time) {

                var property;
                var elapsed;
                var value;

                if (time < this._startTime) {
                    return true;
                }

                if (this._onStartCallbackFired === false) {

                    if (this._onStartCallback !== null) {
                        this._onStartCallback(this._object);
                    }

                    this._onStartCallbackFired = true;
                }

                elapsed = (time - this._startTime) / this._duration;
                elapsed = (this._duration === 0 || elapsed > 1) ? 1 : elapsed;

                value = this._easingFunction(elapsed);

                for (property in this._valuesEnd) {

                    // Don't update properties that do not exist in the source object
                    if (this._valuesStart[property] === undefined) {
                        continue;
                    }

                    var start = this._valuesStart[property] || 0;
                    var end = this._valuesEnd[property];

                    if (end instanceof Array) {

                        this._object[property] = this._interpolationFunction(end, value);

                    } else {

                        // Parses relative end values with start as base (e.g.: +10, -3)
                        if (typeof (end) === 'string') {

                            if (end.charAt(0) === '+' || end.charAt(0) === '-') {
                                end = start + parseFloat(end);
                            } else {
                                end = parseFloat(end);
                            }
                        }

                        // Protect against non numeric properties.
                        if (typeof (end) === 'number') {
                            this._object[property] = start + (end - start) * value;
                        }

                    }

                }

                if (this._onUpdateCallback !== null) {
                    this._onUpdateCallback(this._object, elapsed);
                }

                if (elapsed === 1) {

                    if (this._repeat > 0) {

                        if (isFinite(this._repeat)) {
                            this._repeat--;
                        }

                        // Reassign starting values, restart by making startTime = now
                        for (property in this._valuesStartRepeat) {

                            if (typeof (this._valuesEnd[property]) === 'string') {
                                this._valuesStartRepeat[property] = this._valuesStartRepeat[
                                    property] + parseFloat(this._valuesEnd[property]);
                            }

                            if (this._yoyo) {
                                var tmp = this._valuesStartRepeat[property];

                                this._valuesStartRepeat[property] = this._valuesEnd[property];
                                this._valuesEnd[property] = tmp;
                            }

                            this._valuesStart[property] = this._valuesStartRepeat[property];

                        }

                        if (this._yoyo) {
                            this._reversed = !this._reversed;
                        }

                        if (this._repeatDelayTime !== undefined) {
                            this._startTime = time + this._repeatDelayTime;
                        } else {
                            this._startTime = time + this._delayTime;
                        }

                        if (this._onRepeatCallback !== null) {
                            this._onRepeatCallback(this._object);
                        }

                        return true;

                    } else {

                        if (this._onCompleteCallback !== null) {

                            this._onCompleteCallback(this._object);
                        }

                        for (var i = 0, numChainedTweens = this._chainedTweens.length; i <
                            numChainedTweens; i++) {
                            // Make the chained tweens start exactly at the time they should,
                            // even if the `update()` method was called way past the duration of the tween
                            this._chainedTweens[i].start(this._startTime + this._duration);
                        }

                        return false;

                    }

                }

                return true;

            }
        };


        TWEEN.Easing = {

            Linear: {

                None: function (k) {

                    return k;

                }

            },

            Quadratic: {

                In: function (k) {

                    return k * k;

                },

                Out: function (k) {
                    console.log('k :>> ', k);
                    return k * (2 - k);

                },

                InOut: function (k) {

                    if ((k *= 2) < 1) {
                        return 0.5 * k * k;
                    }

                    return -0.5 * (--k * (k - 2) - 1);

                }

            },

            Cubic: {

                In: function (k) {

                    return k * k * k;

                },

                Out: function (k) {

                    return --k * k * k + 1;

                },

                InOut: function (k) {

                    if ((k *= 2) < 1) {
                        return 0.5 * k * k * k;
                    }

                    return 0.5 * ((k -= 2) * k * k + 2);

                }

            },

            Quartic: {

                In: function (k) {

                    return k * k * k * k;

                },

                Out: function (k) {

                    return 1 - (--k * k * k * k);

                },

                InOut: function (k) {

                    if ((k *= 2) < 1) {
                        return 0.5 * k * k * k * k;
                    }

                    return -0.5 * ((k -= 2) * k * k * k - 2);

                }

            },

            Quintic: {

                In: function (k) {

                    return k * k * k * k * k;

                },

                Out: function (k) {

                    return --k * k * k * k * k + 1;

                },

                InOut: function (k) {

                    if ((k *= 2) < 1) {
                        return 0.5 * k * k * k * k * k;
                    }

                    return 0.5 * ((k -= 2) * k * k * k * k + 2);

                }

            },

            Sinusoidal: {

                In: function (k) {

                    return 1 - Math.cos(k * Math.PI / 2);

                },

                Out: function (k) {

                    return Math.sin(k * Math.PI / 2);

                },

                InOut: function (k) {

                    return 0.5 * (1 - Math.cos(Math.PI * k));

                }

            },

            Exponential: {

                In: function (k) {

                    return k === 0 ? 0 : Math.pow(1024, k - 1);

                },

                Out: function (k) {

                    return k === 1 ? 1 : 1 - Math.pow(2, -10 * k);

                },

                InOut: function (k) {

                    if (k === 0) {
                        return 0;
                    }

                    if (k === 1) {
                        return 1;
                    }

                    if ((k *= 2) < 1) {
                        return 0.5 * Math.pow(1024, k - 1);
                    }

                    return 0.5 * (-Math.pow(2, -10 * (k - 1)) + 2);

                }

            },

            Circular: {

                In: function (k) {

                    return 1 - Math.sqrt(1 - k * k);

                },

                Out: function (k) {

                    return Math.sqrt(1 - (--k * k));

                },

                InOut: function (k) {

                    if ((k *= 2) < 1) {
                        return -0.5 * (Math.sqrt(1 - k * k) - 1);
                    }

                    return 0.5 * (Math.sqrt(1 - (k -= 2) * k) + 1);

                }

            },

            Elastic: {

                In: function (k) {

                    if (k === 0) {
                        return 0;
                    }

                    if (k === 1) {
                        return 1;
                    }

                    return -Math.pow(2, 10 * (k - 1)) * Math.sin((k - 1.1) * 5 * Math.PI);

                },

                Out: function (k) {

                    if (k === 0) {
                        return 0;
                    }

                    if (k === 1) {
                        return 1;
                    }

                    return Math.pow(2, -10 * k) * Math.sin((k - 0.1) * 5 * Math.PI) + 1;

                },

                InOut: function (k) {

                    if (k === 0) {
                        return 0;
                    }

                    if (k === 1) {
                        return 1;
                    }

                    k *= 2;

                    if (k < 1) {
                        return -0.5 * Math.pow(2, 10 * (k - 1)) * Math.sin((k - 1.1) * 5 * Math.PI);
                    }

                    return 0.5 * Math.pow(2, -10 * (k - 1)) * Math.sin((k - 1.1) * 5 * Math.PI) + 1;

                }

            },

            Back: {

                In: function (k) {

                    var s = 1.70158;

                    return k * k * ((s + 1) * k - s);

                },

                Out: function (k) {

                    var s = 1.70158;

                    return --k * k * ((s + 1) * k + s) + 1;

                },

                InOut: function (k) {

                    var s = 1.70158 * 1.525;

                    if ((k *= 2) < 1) {
                        return 0.5 * (k * k * ((s + 1) * k - s));
                    }

                    return 0.5 * ((k -= 2) * k * ((s + 1) * k + s) + 2);

                }

            },

            Bounce: {

                In: function (k) {

                    return 1 - TWEEN.Easing.Bounce.Out(1 - k);

                },

                Out: function (k) {

                    if (k < (1 / 2.75)) {
                        return 7.5625 * k * k;
                    } else if (k < (2 / 2.75)) {
                        return 7.5625 * (k -= (1.5 / 2.75)) * k + 0.75;
                    } else if (k < (2.5 / 2.75)) {
                        return 7.5625 * (k -= (2.25 / 2.75)) * k + 0.9375;
                    } else {
                        return 7.5625 * (k -= (2.625 / 2.75)) * k + 0.984375;
                    }

                },

                InOut: function (k) {

                    if (k < 0.5) {
                        return TWEEN.Easing.Bounce.In(k * 2) * 0.5;
                    }

                    return TWEEN.Easing.Bounce.Out(k * 2 - 1) * 0.5 + 0.5;

                }

            }

        };

        TWEEN.Interpolation = {

            Linear: function (v, k) {

                var m = v.length - 1;
                var f = m * k;
                var i = Math.floor(f);
                var fn = TWEEN.Interpolation.Utils.Linear;

                if (k < 0) {
                    return fn(v[0], v[1], f);
                }

                if (k > 1) {
                    return fn(v[m], v[m - 1], m - f);
                }

                return fn(v[i], v[i + 1 > m ? m : i + 1], f - i);

            },

            Bezier: function (v, k) {

                var b = 0;
                var n = v.length - 1;
                var pw = Math.pow;
                var bn = TWEEN.Interpolation.Utils.Bernstein;

                for (var i = 0; i <= n; i++) {
                    b += pw(1 - k, n - i) * pw(k, i) * v[i] * bn(n, i);
                }

                return b;

            },

            CatmullRom: function (v, k) {

                var m = v.length - 1;
                var f = m * k;
                var i = Math.floor(f);
                var fn = TWEEN.Interpolation.Utils.CatmullRom;

                if (v[0] === v[m]) {

                    if (k < 0) {
                        i = Math.floor(f = m * (1 + k));
                    }

                    return fn(v[(i - 1 + m) % m], v[i], v[(i + 1) % m], v[(i + 2) % m], f - i);

                } else {

                    if (k < 0) {
                        return v[0] - (fn(v[0], v[0], v[1], v[1], -f) - v[0]);
                    }

                    if (k > 1) {
                        return v[m] - (fn(v[m], v[m], v[m - 1], v[m - 1], f - m) - v[m]);
                    }

                    return fn(v[i ? i - 1 : 0], v[i], v[m < i + 1 ? m : i + 1], v[m < i + 2 ? m :
                        i + 2], f - i);

                }

            },

            Utils: {

                Linear: function (p0, p1, t) {

                    return (p1 - p0) * t + p0;

                },

                Bernstein: function (n, i) {

                    var fc = TWEEN.Interpolation.Utils.Factorial;

                    return fc(n) / fc(i) / fc(n - i);

                },

                Factorial: (function () {

                    var a = [1];

                    return function (n) {

                        var s = 1;

                        if (a[n]) {
                            return a[n];
                        }

                        for (var i = n; i > 1; i--) {
                            s *= i;
                        }

                        a[n] = s;
                        return s;

                    };

                })(),

                CatmullRom: function (p0, p1, p2, p3, t) {

                    var v0 = (p2 - p0) * 0.5;
                    var v1 = (p3 - p1) * 0.5;
                    var t2 = t * t;
                    var t3 = t * t2;

                    return (2 * p1 - 2 * p2 + v0 + v1) * t3 + (-3 * p1 + 3 * p2 - 2 * v0 - v1) *
                        t2 + v0 * t + p1;

                }

            }

        };
        TWEEN.version = version;

        return TWEEN;

    })));
</script>

<script>
    // 转场后的相机点位。用于绘制起始点
    const endCamera = {
        5: {
            id: 2,
            x: 735,
            y: 324
        },
        3: {
            id: 3,
            x: 729,
            y: 753
        },
        4: {
            id: 4,
            x: 972,
            y: 376
        },
        2: {
            id: 5,
            x: 715,
            y: 324
        },
        6: {
            id: 6,
            x: 750,
            y: 324
        },
        7: {
            id: 7,
            x: 459,
            y: 348
        },
        8: {
            id: 8,
            x: 619,
            y: 328
        },
        9: {
            id: 9,
            x: 539,
            y: 336
        },
        10: {
            id: 10,
            x: 711,
            y: 680
        },
        11: {
            id: 11,
            x: 874,
            y: 586
        },
        12: {
            id: 12,
            x: 973,
            y: 440
        },
        13: {
            id: 13,
            x: 874,
            y: 586
        },
        14: {
            id: 14,
            x: 973,
            y: 440
        },
        15: {
            id: 15,
            x: 814,
            y: 416
        },
        16: {
            id: 16,
            x: 664,
            y: 652
        },
        17: {
            id: 17,
            x: 464,
            y: 648
        },
        18: {
            id: 18,
            x: 462,
            y: 441
        },
        // 18: {"id":18,"x":462,"y":441}
        19: {
            id: 19,
            x: 1007,
            y: 571
        },
        20: {
            id: 20,
            x: 944,
            y: 657
        },
        21: {
            id: 21,
            x: 404,
            y: 364
        },
        22: {
            id: 22,
            x: 572,
            y: 724
        },
        23: {
            id: 28,
            x: 404,
            y: 563
        },
        24: {
            id: 24,
            x: 404,
            y: 364
        },
        25: {
            id: 25,
            x: 1054,
            y: 487
        },
        26: {
            id: 26,
            x: 1007,
            y: 571
        },
        27: {
            id: 27,
            x: 874,
            y: 586
        },
        28: {
            id: 23,
            x: 466,
            y: 494
        },
        29: {
            id: 29,
            x: 534,
            y: 588
        },
        30: {
            id: 30,
            x: 973,
            y: 440
        },
        31: {
            id: 31,
            x: 944,
            y: 657
        },
        32: {
            id: 32,
            x: 602,
            y: 419
        },
        33: {
            id: 33,
            x: 639,
            y: 746
        },
        34: {
            id: 34,
            x: 852,
            y: 719
        },
        35: {
            id: 35,
            x: 708,
            y: 414
        },
        37: {
            id: 37,
            x: 483,
            y: 437
        },
        38: {
            id: 38,
            x: 466,
            y: 494
        },
        39: {
            id: 39,
            x: 602,
            y: 419
        },
        40: {
            id: 40,
            x: 1061,
            y: 472
        },
        41: {
            id: 41,
            x: 664,
            y: 652
        },
        42: {
            id: 42,
            x: 572,
            y: 724
        },
        43: {
            id: 43,
            x: 534,
            y: 588
        },
        44: {
            id: 44,
            x: 464,
            y: 648
        },
        45: {
            id: 45,
            x: 708,
            y: 414
        },
        46: {
            id: 46,
            x: 893,
            y: 330
        },
        47: {
            id: 47,
            x: 831,
            y: 326
        },
        48: {
            id: 48,
            x: 378,
            y: 463
        }
    }

    // 所有相邻点到点的路线
    const alltraces = {
        '21_7': {
            x0: 459,
            y0: 348,
            xA: [450, 432, 404],
            yA: [354, 353, 364]
        },
        '7_9': {
            x0: 539,
            y0: 336,
            xA: [506, 489, 459],
            yA: [340, 345, 348]
        },
        '9_8': {
            x0: 619,
            y0: 328,
            xA: [581, 562, 539],
            yA: [330, 334, 336]
        },
        '8_5': {
            x0: 735,
            y0: 324,
            xA: [713, 670, 619],
            yA: [325, 323, 328]
        },
        '47_46': {
            x0: 893,
            y0: 330,
            xA: [869, 860, 831],
            yA: [328, 326, 326]
        },
        '46_4': {
            x0: 972,
            y0: 376,
            xA: [975, 945, 893],
            yA: [337, 338, 330]
        },
        '21_18': {
            x0: 462,
            y0: 441,
            xA: [463, 424, 404],
            yA: [363, 402, 364]
        },
        '48_18': {
            x0: 462,
            y0: 441,
            xA: [414, 406, 378],
            yA: [451, 454, 463]
        },
        '18_28': {
            x0: 466,
            y0: 494,
            xA: [457, 450, 462],
            yA: [483, 465, 441]
        },
        '18_32': {
            x0: 602,
            y0: 419,
            xA: [579, 484, 462],
            yA: [422, 434, 441]
        },
        '32_45': {
            x0: 708,
            y0: 414,
            xA: [682, 650, 602],
            yA: [414, 416, 419]
        },
        '45_15': {
            x0: 814,
            y0: 416,
            xA: [805, 750, 708],
            yA: [415, 413, 414]
        },
        '15_14': {
            x0: 973,
            y0: 440,
            xA: [932, 860, 814],
            yA: [429, 418, 416]
        },
        '14_40': {
            x0: 1060,
            y0: 472,
            xA: [1031, 997, 973],
            yA: [454, 445, 440]
        },
        '28_23': {
            x0: 404,
            y0: 563,
            xA: [386, 482, 466],
            yA: [545, 529, 494]
        },
        '5_45': {
            x0: 708,
            y0: 414,
            xA: [744, 733, 735],
            yA: [394, 355, 324]
        },
        '5_15': {
            x0: 814,
            y0: 416,
            xA: [754, 739, 735],
            yA: [413, 408, 324]
        },
        '4_14': {
            x0: 973,
            y0: 440,
            xA: [959, 950, 972],
            yA: [444, 416, 376]
        },
        '14_11': {
            x0: 874,
            y0: 586,
            xA: [924, 948, 973],
            yA: [536, 501, 440]
        },
        '40_19': {
            x0: 1007,
            y0: 571,
            xA: [1027, 1039, 1060],
            yA: [538, 519, 472]
        },
        '19_20': {
            x0: 944,
            y0: 657,
            xA: [982, 988, 1007],
            yA: [615, 602, 571]
        },
        '20_34': {
            x0: 852,
            y0: 719,
            xA: [897, 917, 944],
            yA: [700, 684, 657]
        },
        '10_3': {
            x0: 729,
            y0: 753,
            xA: [750, 733, 711],
            yA: [728, 699, 680]
        },
        '10_16': {
            x0: 664,
            y0: 652,
            xA: [683, 687, 711],
            yA: [636, 662, 680]
        },
        '11_10': {
            x0: 711,
            y0: 680,
            xA: [704, 804, 874],
            yA: [643, 658, 586]
        },
        '11_20': {
            x0: 944,
            y0: 657,
            xA: [936, 894, 874],
            yA: [642, 604, 586]
        },
        '11_16': {
            x0: 664,
            y0: 652,
            xA: [732, 827, 874],
            yA: [663, 634, 586]
        },
        '16_29': {
            x0: 534,
            y0: 588,
            xA: [574, 618, 664],
            yA: [627, 644, 652]
        },
        '28_29': {
            x0: 534,
            y0: 588,
            xA: [495, 465, 466],
            yA: [557, 493, 494]
        },
        '16_33': {
            x0: 639,
            y0: 746,
            xA: [657, 655, 664],
            yA: [766, 678, 652]
        },
        '33_22': {
            x0: 572,
            y0: 724,
            xA: [601, 614, 639],
            yA: [737, 742, 746]
        },
        '22_17': {
            x0: 464,
            y0: 648,
            xA: [502, 517, 572],
            yA: [683, 696, 724]
        },
        '23_17': {
            x0: 464,
            y0: 648,
            xA: [442, 414, 404],
            yA: [627, 585, 563]
        },
        '47_5': {
            x0: 735,
            y0: 324,
            xA: [779, 798, 831],
            yA: [325, 324, 326]
        },
        '45_16': {
            x0: 664,
            y0: 652,
            xA: [724, 716, 708],
            yA: [660, 600, 414]
        },
        '45_10': {
            x0: 711,
            y0: 680,
            xA: [713, 707, 708],
            yA: [645, 491, 414]
        },
        '7_21': {
            x0: 404,
            y0: 364,
            xA: [432, 450, 459],
            yA: [353, 354, 348]
        },
        '9_7': {
            x0: 459,
            y0: 348,
            xA: [489, 506, 539],
            yA: [345, 340, 336]
        },
        '8_9': {
            x0: 539,
            y0: 336,
            xA: [562, 581, 619],
            yA: [334, 330, 328]
        },
        '5_8': {
            x0: 619,
            y0: 328,
            xA: [670, 713, 735],
            yA: [323, 325, 324]
        },
        '46_47': {
            x0: 831,
            y0: 326,
            xA: [860, 869, 893],
            yA: [326, 328, 330]
        },
        '4_46': {
            x0: 893,
            y0: 330,
            xA: [945, 975, 972],
            yA: [338, 337, 376]
        },
        '18_21': {
            x0: 404,
            y0: 364,
            xA: [424, 463, 462],
            yA: [402, 363, 441]
        },
        '18_48': {
            x0: 378,
            y0: 463,
            xA: [406, 414, 462],
            yA: [454, 451, 441]
        },
        '28_18': {
            x0: 462,
            y0: 441,
            xA: [450, 457, 466],
            yA: [465, 483, 494]
        },
        '32_18': {
            x0: 462,
            y0: 441,
            xA: [484, 579, 602],
            yA: [434, 422, 419]
        },
        '45_32': {
            x0: 602,
            y0: 419,
            xA: [650, 682, 708],
            yA: [416, 414, 414]
        },
        '15_45': {
            x0: 708,
            y0: 414,
            xA: [750, 805, 814],
            yA: [413, 415, 416]
        },
        '14_15': {
            x0: 814,
            y0: 416,
            xA: [860, 932, 973],
            yA: [418, 429, 440]
        },
        '40_14': {
            x0: 973,
            y0: 440,
            xA: [997, 1031, 1060],
            yA: [445, 454, 472]
        },
        '23_28': {
            x0: 466,
            y0: 494,
            xA: [482, 386, 404],
            yA: [529, 545, 563]
        },
        '45_5': {
            x0: 735,
            y0: 324,
            xA: [733, 744, 708],
            yA: [355, 394, 414]
        },
        '15_5': {
            x0: 735,
            y0: 324,
            xA: [739, 754, 814],
            yA: [408, 413, 416]
        },
        '14_4': {
            x0: 972,
            y0: 376,
            xA: [950, 959, 973],
            yA: [416, 444, 440]
        },
        '11_14': {
            x0: 973,
            y0: 440,
            xA: [948, 924, 874],
            yA: [501, 536, 586]
        },
        '19_40': {
            x0: 1060,
            y0: 472,
            xA: [1039, 1027, 1007],
            yA: [519, 538, 571]
        },
        '20_19': {
            x0: 1007,
            y0: 571,
            xA: [988, 982, 944],
            yA: [602, 615, 657]
        },
        '34_20': {
            x0: 944,
            y0: 657,
            xA: [917, 897, 852],
            yA: [684, 700, 719]
        },
        '3_10': {
            x0: 711,
            y0: 680,
            xA: [733, 750, 729],
            yA: [699, 728, 753]
        },
        '16_10': {
            x0: 711,
            y0: 680,
            xA: [687, 683, 664],
            yA: [662, 636, 652]
        },
        '10_11': {
            x0: 874,
            y0: 586,
            xA: [804, 704, 711],
            yA: [658, 643, 680]
        },
        '20_11': {
            x0: 874,
            y0: 586,
            xA: [894, 936, 944],
            yA: [604, 642, 657]
        },
        '16_11': {
            x0: 874,
            y0: 586,
            xA: [827, 732, 664],
            yA: [634, 663, 652]
        },
        '29_16': {
            x0: 664,
            y0: 652,
            xA: [618, 574, 534],
            yA: [644, 627, 588]
        },
        '29_28': {
            x0: 466,
            y0: 494,
            xA: [465, 495, 534],
            yA: [493, 557, 588]
        },
        '33_16': {
            x0: 664,
            y0: 652,
            xA: [655, 657, 639],
            yA: [678, 766, 746]
        },
        '22_33': {
            x0: 639,
            y0: 746,
            xA: [614, 601, 572],
            yA: [742, 737, 724]
        },
        '17_22': {
            x0: 572,
            y0: 724,
            xA: [517, 502, 464],
            yA: [696, 683, 648]
        },
        '17_23': {
            x0: 404,
            y0: 563,
            xA: [414, 442, 464],
            yA: [585, 627, 648]
        },
        '5_47': {
            x0: 831,
            y0: 326,
            xA: [798, 779, 735],
            yA: [324, 325, 324]
        },
        '16_45': {
            x0: 708,
            y0: 414,
            xA: [716, 724, 664],
            yA: [600, 660, 652]
        },
        '10_45': {
            x0: 708,
            y0: 414,
            xA: [707, 713, 711],
            yA: [491, 645, 680]
        }

    }
    // 点附近有哪些点
    const DictionaryOfPoints = {
        3: [10],
        4: [14, 46],
        5: [8, 15, 45, 47],
        7: [9, 21],
        8: [9, 5],
        9: [7, 8],
        10: [3, 11, 16, 45],
        11: [10, 14, 20],
        14: [4, 11, 15, 40],
        15: [5, 14, 45],
        16: [10, 11, 29, 33, 45],
        17: [22, 23],
        18: [21, 28, 32, 48],
        19: [20, 40],
        20: [11, 19, 34],
        21: [7, 18],
        22: [17, 33],
        23: [17, 28],
        28: [18, 23, 29],
        29: [16, 28],
        32: [18, 45],
        33: [16, 22],
        34: [20],
        40: [14, 19],
        45: [5, 10, 15, 16, 32],
        46: [4, 47],
        47: [5, 46],
        48: [18]
    }
    // 把同一位置的不通点 替换为同一点
    function replaceId(str) {
        const rules = {
            2: 5,
            6: 5,
            12: 14,
            13: 11,
            24: 21,
            25: 40,
            26: 19,
            27: 11,
            30: 14,
            31: 20,
            35: 45,
            36: 16,
            37: 18,
            38: 23,
            39: 32,
            41: 33,
            42: 22,
            43: 29,
            44: 17
        }
        if (rules[str]) {
            return rules[str] * 1
        }
        return str * 1
    }


    // 获取点到点能走的所有路线
    const getTrils = start => end => obj => path => {
        if (start === end) {
            return [path]
        }
        if (path.length === Object.keys(obj).length + 1) {
            return [
                []
            ]
        }
        if (obj[start] == null) {
            return [
                []
            ]
        }
        return obj[start].filter(a => !path.includes(a)).map(a => getTrils(a)(end)(obj)([...path, a])).flat()
            .filter(a => a.length !== 0)
    }
    // 获取接口返回的轨迹数据中所包含的点
    function getTrailsPoint(trails) {
        const hasIdTrails = []
        const length = trails.length
        for (let i = 0; i < length; i++) {
            const _trails = trails[i]
            if (_trails.name) {
                const _index = _trails.name.lastIndexOf('_') + 1
                if (_index > 0) {
                    hasIdTrails.push(replaceId(parseInt(_trails.name.slice(_index))))
                }
            }
        }
        return hasIdTrails
    }
    // 重新组合点
    function composePoints(trailsPoints) {
        const composedPoints = []
        for (let i = 0; i < trailsPoints.length; i++) {
            // 如果没有最后一个，把第一个放入数据，跳出循环
            if (!trailsPoints[i + 1]) {
                composedPoints.push(trailsPoints[i])
                break
            }
            const trailsStartStart = trailsPoints[i]
            const trailsStartEnd = trailsPoints[i + 1]
            if (trailsStartStart === trailsStartEnd) {
                continue
            }
            const trailkey = trailsStartStart + '_' + trailsStartEnd
            const alltracesValue = alltraces[trailkey.replace(/(\d+)_(\d+)/, '$2_$1')]
            if (alltracesValue) {
                composedPoints.push(trailsStartStart)
            } else {
                const arrFirst = getTrils(trailsStartStart)(trailsStartEnd)(DictionaryOfPoints)([trailsStartStart])
                    .sort((a, b) => {
                        return a.length - b.length
                    })[0]
                arrFirst && composedPoints.push(...arrFirst)
            }
        }
        return composedPoints
    }

    // 组合动画
    function getTween(context, composedPoints, avatar) {
        const tweens = []
        for (let i = 0; i < composedPoints.length; i++) {
            if (!composedPoints[i + 1]) break
            const trailsStartStart = composedPoints[i]
            const trailsStartEnd = composedPoints[i + 1]
            if (trailsStartStart === trailsStartEnd) {
                continue
            }
            const trailkey = trailsStartStart + '_' + trailsStartEnd
            const alltracesValue = alltraces[trailkey.replace(/(\d+)_(\d+)/, '$2_$1')]
            console.log('alltracesValue :>> ', alltracesValue); //
            // '15_5': { x0: 735, y0: 324, xA: [739, 754, 814], yA: [408, 413, 416] },
            if (!alltracesValue) {
                console.log('trailkey :>> ', trailkey);
            }
            const obj = {
                x: alltracesValue.x0,
                y: alltracesValue.y0,
                old: {
                    x: alltracesValue.x0,
                    y: alltracesValue.y0
                }
            }
            context.lineWidth = 1
            context.strokeStyle = '#0486EB'
            tweens.push(new TWEEN.Tween(obj).to({
                x: alltracesValue.xA,
                y: alltracesValue.yA
            }, 1000).onUpdate(function (object) {
                if (avatar) {
                    avatar.style.left = object.x - 40 - 15 + 'px' // 
                    avatar.style.top = object.y - 136 - 15 + 'px'
                     // avatar.style.setProperty('transform', `translate(${object.x - 40 - 15}px, ${object.y - 136 - 15}px)`)
                   
                }
                context.beginPath()
                context.moveTo(object.old.x, object.old.y)
                context.lineTo(object.x, object.y)
                context.stroke()
                object.old.x = object.x
                object.old.y = object.y
            }).interpolation(TWEEN.Interpolation.Bezier))
        }
        return tweens
    }

    class DrawTrails {
        tweens = []
        constructor(params) {
            const {
                id,
                trails = [],
                avatar
            } = params
            if (!params.id || trails.length === 0) return
            const clearTrails = getTrailsPoint(trails)
            console.log('clearTrails :>> ', clearTrails);
            const composedPoints = composePoints(clearTrails)
            console.log('composedPoints :>> ', composedPoints);
            const canvas = document.getElementById(id)
            const context = canvas.getContext('2d')
            context.clearRect(0, 0, canvas.width, canvas.height)
            this.context = context
            this.canvas = canvas
            this.id = id
            this.tweens = getTween(context, composedPoints, avatar)
            this.init()
            this.requestAnimationId = 0
            this.avatar = avatar
        }

        init() {
            const {
                tweens
            } = this
            const self = this

            tweens.reduce((prev, curr) => {
                prev.chain(curr)
                return curr
            })
            this.tweens[0] && this.tweens[0].start()

            function animate(time) {
                self.requestAnimationId = requestAnimationFrame(animate)
                TWEEN.update(time)
            }
            animate()
        }
        stop() {
            const {
                tweens,
                requestAnimationId,
                context,
                canvas
            } = this
            if (!context) return
            context.clearRect(0, 0, canvas.width, canvas.height)
            console.log('停止动画 :>> ')
            cancelAnimationFrame(requestAnimationId)
            if (tweens.length) {
                tweens.forEach((item, index) => {
                    item.stop()
                    // item.stopChainedTweens()
                })
            }
        }
    }
</script>
<style>
    * {
        margin: 0;
        padding: 0;
    }

    #jsOfficeCanvas {
        width: 1920px;
        height: 1080px;
        position: absolute;
        z-index: 2;
        left: -40px;
        top: -136px;
    }

    video {
        width: 1920px;
        height: 1080px;
        position: absolute;
        z-index: 1;
        left: -40px;
        top: -136px;
    }
    .tril-avatar{
        width: 30px;
        height: 30px;
        border-radius: 50%;
        -o-object-fit: cover;
        object-fit: cover;
        background: #f5f5f4;
        position: absolute;
        z-index: 99999;
        left: -9999px;
    }
</style>

<body>
    <canvas width="1920" height="1080" id="jsOfficeCanvas" ref="jsOfficeCanvas"></canvas>

    <video src="http://qk.debugs.cn/pensees/office/starttoend.mp4" width="100%" height="100%" autoplay muted></video>

    <script>
        setTimeout(() => {
            const avatar = document.createElement('img')
            avatar.setAttribute('id', 'trailAvatar')
            avatar.setAttribute('src',
                'https://pic.netbian.com/uploads/allimg/180128/112234-1517109754d925.jpg')
            avatar.className = 'tril-avatar'
            document.body.appendChild(avatar)

            function getTrailsPoint(trails) {
                const hasIdTrails = []
                const length = trails.length
                for (let i = 0; i < length; i++) {
                    const _trails = trails[i]
                    if (_trails.name && _trails.name.lastIndexOf('_') > -1) {
                        hasIdTrails.push(trails[i])
                    }
                }
                return hasIdTrails
            }
            const {
                showRight
            } = this
            const trails = getTrailsPoint([{
                name: '会议_5'
            }, {
                name: '会议_15'
            }, {
                name: '会议_12'
            }, {
                name: '会议_11'
            }, {
                name: '会议_16'
            }, {
                name: '会议_33'
            }, {
                name: '会议_33'
            }, {
                name: '会议_33'
            }, {
                name: '会议_33'
            }, {
                name: '会议_22'
            }, {
                name: '会议_17'
            }, {
                name: '会议_23'
            }, {
                name: '会议_28'
            }, {
                name: '会议_18'
            }, {
                name: '会议_21'
            }])




            new DrawTrails({
                id: 'jsOfficeCanvas',
                trails,
                avatar
            })

        }, 2000);
    </script>
</body>

</html>
```
:::